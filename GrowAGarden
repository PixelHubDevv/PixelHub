-----------------------------------------------------------------------------------------------
---------- Local
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local remote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE")
local players_service = cloneref(game:GetService("Players"))
local local_player = players_service.LocalPlayer
local localplayer = game.Players.LocalPlayer
local workspace_ref = cloneref(workspace)
local farm_model = nil
local NotificationLibrary = loadstring(game:HttpGet("https://pixelhubdevv.netlify.app/Notification",true))()
local UILibrary = loadstring(game:HttpGet("https://pixelhubdevv.netlify.app/UI"))()
local InterfaceManager = loadstring(game:HttpGet("https://pixelhubdevv.netlify.app/InterfaceManager"))()
local SaveManager = loadstring(game:HttpGet("https://pixelhubdevv.netlify.app/SaveManager"))()
local pickup_enabled = false
local pickup_radius = 150
local autoCollect = false
local autoCollect2 = false
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local buySeedEvent = GameEvents:WaitForChild("BuySeedStock")
local SeedSelection = "Unknown"
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local SeedShopUI = playerGui:WaitForChild("Seed_Shop")
local CosmeticShopUI = playerGui:WaitForChild("CosmeticShop_UI")
local HoneyEventShopUI = playerGui:WaitForChild("HoneyEventShop_UI")
local GearShopUI = playerGui:WaitForChild("Gear_Shop")
local PlaceId = game.PlaceId
------------------------------------------------------------------------------------------------
---------- Function

local function getOwnedPlot()
    for _, plot in pairs(workspace.Farm:GetChildren()) do
        local important = plot:FindFirstChild("Important") or plot:FindFirstChild("Importanert")
        if important then
            local data = important:FindFirstChild("Data")
            if data and data:FindFirstChild("Owner") and data.Owner.Value == player.Name then
                return plot
            end
        end
    end
    return nil
end
local plot = getOwnedPlot()
local farm = plot and plot:FindFirstChild("Important"):FindFirstChild("Plants_Physical")

task.spawn(function()
    while task.wait(0.1) do
        if autoCollect then
            if farm then
                for _, prompt in ipairs(farm:GetDescendants()) do
                    if prompt:IsA("ProximityPrompt") then
                        local playerRoot = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                        if playerRoot then
                            local dist = (playerRoot.Position - prompt.Parent.Position).Magnitude
                            if dist <= 30 then
                                prompt.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
                                prompt.MaxActivationDistance = 100
                                prompt.RequiresLineOfSight = false
                                prompt.Enabled = autoCollect
                                fireproximityprompt(prompt, 1, true)
                            elseif autoWalkToPlant then
                                
                                local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
                                if humanoid then
                                    humanoid:MoveTo(prompt.Parent.Position + Vector3.new(0, 5, 0)) 
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.1) do
        if autoCollect2 and farm and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local playerRoot = player.Character.HumanoidRootPart
            local closestPrompt = nil
            local closestDistance = math.huge
            
            for _, prompt in ipairs(farm:GetDescendants()) do
                if prompt:IsA("ProximityPrompt") and prompt.Parent and prompt.Parent:IsA("BasePart") then
                    local dist = (playerRoot.Position - prompt.Parent.Position).Magnitude
                    if dist < closestDistance then
                        closestPrompt = prompt
                        closestDistance = dist
                    end
                end
            end
            if closestPrompt then
                playerRoot.CFrame = CFrame.new(closestPrompt.Parent.Position - Vector3.new(0, 5, 0))
                task.wait(0.3)
                closestPrompt.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
                closestPrompt.MaxActivationDistance = 100
                closestPrompt.RequiresLineOfSight = false
                closestPrompt.Enabled = autoCollect3
                fireproximityprompt(closestPrompt, 1, true)
            end
        end
    end
end)

local function BuySeed(seed_name)
    if playerGui.Seed_Shop.Frame.ScrollingFrame[seed_name].Main_Frame.Cost_Text.TextColor3 ~= Color3.fromRGB(255, 0, 0) then
        buySeedEvent:FireServer(seed_name)
    end
end

local function EquipSeed(seed_name)
    local character = localPlayer.Character
    if not character then return false end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return false end

    for _, item in ipairs(localPlayer.Backpack:GetChildren()) do
        if item:GetAttribute("ITEM_TYPE") == "Seed" and item:GetAttribute("Seed") == seed_name then
            humanoid:EquipTool(item)
            task.wait()
            local equipped_tool = character:FindFirstChildOfClass("Tool")
            if equipped_tool and equipped_tool:GetAttribute("ITEM_TYPE") == "Seed" and equipped_tool:GetAttribute("Seed") == seed_name then
                return equipped_tool
            end
        end
    end

    local equipped_tool = character:FindFirstChildOfClass("Tool")
    if equipped_tool and equipped_tool:GetAttribute("ITEM_TYPE") == "Seed" and equipped_tool:GetAttribute("Seed") == seed_name then
        return equipped_tool
    end
    
    return false
end

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local PlaceId = game.PlaceId
local JobId = game.JobId
local LocalPlayer = Players.LocalPlayer

local function getServers(cursor)
    local url = "https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
    if cursor then
        url = url .. "&cursor=" .. cursor
    end

    local success, response = pcall(function()
        return game:HttpGet(url)
    end)
    if success then
        return HttpService:JSONDecode(response)
    else
        return nil
    end
end

local function serverHop()
    local cursor = nil
    repeat
        local data = getServers(cursor)
        if not data then break end

        for _, server in ipairs(data.data) do
            if server.playing < 5 and server.id ~= JobId then  -- server ít người <5
                TeleportService:TeleportToPlaceInstance(PlaceId, server.id, LocalPlayer)
                return
            end
        end

        cursor = data.nextPageCursor
    until not cursor
end

------------------------------------------------------------------------------------------------
---------- UI

local Window = Fluent:CreateWindow({
    Title = "Pixel Hub ( Free ) | Grow A Garden | Server Version: ".. game.PlaceVersion .. " | ",
    SubTitle = "Made By BinbinvoGaming",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})


------------------------------------------------------------------------------------------------
---------- Tabs
local Tabs = {
    Info = Window:AddTab({ Title = "Info", Icon = "info" }),
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "store" }),
    UI = Window:AddTab({ Title = "UI", Icon = "citrus" }),
    Visual =  Window:AddTab({ Title = "Visual", Icon = "app-window-mac" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "circle-ellipsis" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}
------------------------------------------------------------------------------------------------
---------- Button
Tabs.Info:AddButton({
        Title = "Copy Youtube Link",
        Description = "Copy Youtube BinbinvoGaming",
        Callback = function()
            setclipboard("https://youtube.com/@binbinvogaming")
        end
})
------------------------------------------------------------------------------------------------
---------- Button/Toogle/Dropdown
local Toggle1 = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Collect ( All )", Default = false })
Toggle1:OnChanged(function(Value)
    autoCollect = Value
end)
local Toggle2 = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Collect  ( Teleport )", Default = false })
Toggle2:OnChanged(function(Value)
    autoCollect2 = Value
end)
local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Collect Radius",
        Description = "Collect Radius",
        Default = 150,
        Min = 50,
        Max = 1000,
        Rounding = 1,
        Callback = function(Value)
           pickup_radius = Value 
        end
    })

    Slider:OnChanged(function(Value)
        pickup_radius = Value
    end)
local Dropdown = Tabs.Shop:AddDropdown("Dropdown", {
        Title = "Seed Selection",
        Values = {'Carrot', 'Strawberry', "Blueberry", 'Orange Tulip', 'Tomato', 'Corn', 'Daffodil', "Pumpkin", 'Watermelon', 'Apple', 'Bamboo', 'Coconut', 'Cactus', 'Dragon Fruit', 'Mango', 'Grape', 'Mushroom', 'Pepper', 'Cacao', 'Beanstalk'},
        Multi = false,
        Default = 1,
    })


    Dropdown:OnChanged(function(Value)
        SeedSelection = Value
    end)
    Tabs.Shop:AddButton({
        Title = "Buy Seed",
        Description = "Buy Seed Selection ( Auto Buy Soon )",
        Callback = function()
            if SeedSelection == "Unknown" then
               NotificationLibrary:SendNotification("Warning", "Please Selection Seed To Buy!", 10)
            else
               BuySeed(SeedSelection)
            end
        end
    })
Tabs.UI:AddButton({
        Title = "Seed Shop",
        Description = "On/Off Seed Shop UI",
        Callback = function()
            if SeedShopUI.Enabled == false then
   SeedShopUI.Enabled = true
else
   SeedShopUI.Enabled = false
end
        end
    })
    Tabs.UI:AddButton({
        Title = "Cosmetic Shop",
        Description = "On/Off Cosmetic Shop UI",
        Callback = function()
            if CosmeticShopUI.Enabled == false then
   CosmeticShopUI.Enabled = true
else
   CosmeticShopUI.Enabled = false
end
        end
    })
    Tabs.UI:AddButton({
        Title = "Honey Shop",
        Description = "On/Off Honey Shop UI",
        Callback = function()
            if HoneyEventShopUI.Enabled == false then
   HoneyEventShopUI.Enabled = true
else
   HoneyEventShopUI.Enabled = false
end
        end
    })
    Tabs.UI:AddButton({
        Title = "Gear Shop",
        Description = "On/Off Gear Shop UI",
        Callback = function()
            if GearShopUI.Enabled == false then
   GearShopUI.Enabled = true
else
   GearShopUI.Enabled = false
end
        end
    })
    Tabs.Misc:AddButton({
        Title = "Server Hop",
        Description = "Join Server Hop",
        Callback = function()
      serverHop()
    })
    Tabs.Misc:AddButton({
        Title = "Change Server",
        Description = "Change Server",
        Callback = function()
       TeleportService:Teleport(PlaceId)
    })
------------------------------------------------------------------------------------------------
---------- Settings
SaveManager:SetLibrary(UILibrary)
InterfaceManager:SetLibrary(UILibrary)
InterfaceManager:SetFolder("PixelHub")
SaveManager:SetFolder("PixelHub/GrowAGarden")
SaveManager:SetIgnoreIndexes({})
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
SaveManager:LoadAutoloadConfig()
Window:SelectTab(1)
SaveManager:IgnoreThemeSettings()
